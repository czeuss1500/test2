local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

-- Definir o tema, similar ao seu código
Library:SetTheme({
    fontsize = 17, 
    titlesize = 18, 
    font = Enum.Font.Code, 
    background = "rbxassetid://0", 
    tilesize = 90, 
    cursor = false, 
    cursorimg = "https://t0.rbxcdn.com/42f66da98c40252ee151326a82aab51f", 
    backgroundcolor = Color3.fromRGB(20, 20, 20), 
    tabstextcolor = Color3.fromRGB(207, 207, 207), 
    bordercolor = Color3.fromRGB(75, 207, 255), 
    accentcolor = Color3.fromRGB(207, 207, 207), 
    accentcolor2 = Color3.fromRGB(108, 108, 108), 
    outlinecolor = Color3.fromRGB(20, 20, 20), 
    outlinecolor2 = Color3.fromRGB(30, 30, 30), 
    sectorcolor = Color3.fromRGB(30, 30, 30), 
    toptextcolor = Color3.fromRGB(255, 255, 255), 
    topheight = 48, 
    topcolor = Color3.fromRGB(30, 30, 30), 
    topcolor2 = Color3.fromRGB(12, 12, 12), 
    buttoncolor = Color3.fromRGB(49, 49, 49), 
    buttoncolor2 = Color3.fromRGB(29, 29, 29), 
    itemscolor = Color3.fromRGB(170, 170, 170), 
    itemscolor2 = Color3.fromRGB(255, 255, 255)
})

-- Criar a janela principal
local Window = Library:CreateWindow("Minha Janela", Vector2.new(500, 600))

-- Criar uma aba principal
local Tab = Window:CreateTab("Principal")

-- Criar uma seção dentro da aba
local Section = Tab:CreateSection("Controles")

-- Criar um botão para ativar/desativar a visibilidade
Section:CreateButton("Mostrar/Ocultar Janela", function()
    Window.Main.Enabled = not Window.Main.Enabled
end)

-- Adicionar um Toggle (ligar/desligar)
Section:CreateToggle("Ativar Cursor", false, function(state)
    if state then
        Library:ShowCursor()
    else
        Library:HideCursor()
    end
end)

-- Criar um slider para ajustar algo
Section:CreateSlider("Ajustar valor", 0, 100, 50, true, function(value)
    print("Valor ajustado: " .. value)
end)

-- Personalizar o cursor
if Library.theme.cursor then
    local success = pcall(function()
        Library.cursor = Drawing.new("Image")
        Library.cursor.Data = game:HttpGet(Library.theme.cursorimg)
        Library.cursor.Size = Vector2.new(64, 64)
        Library.cursor.Visible = userinputservice.MouseEnabled
        Library.cursor.Rounding = 0
        Library.cursor.Position = Vector2.new(mouse.X - 32, mouse.Y + 6)
    end)

    if success and Library.cursor then
        userinputservice.InputChanged:Connect(function(input)
            if userinputservice.MouseEnabled and input.UserInputType == Enum.UserInputType.MouseMovement then
                Library.cursor.Position = Vector2.new(input.Position.X - 32, input.Position.Y + 7)
            end
        end)

        runservice.RenderStepped:Connect(function()
            userinputservice.OverrideMouseIconBehavior = Enum.OverrideMouseIconBehavior.ForceHide
            Library.cursor.Visible = userinputservice.MouseEnabled and (userinputservice.MouseIconEnabled or guiservice.MenuIsOpen)
        end)
    elseif not success and Library.cursor then
        Library.cursor:Remove()
    end
end



-- Criação da janela
local window = {}

window.TopGradient = Instance.new("UIGradient", window.TopBar)
window.TopGradient.Rotation = 90
window.TopGradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, window.theme.topcolor), ColorSequenceKeypoint.new(1, window.theme.topcolor2)})

updateevent.Event:Connect(function(theme)
    window.TopGradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, theme.topcolor), ColorSequenceKeypoint.new(1, theme.topcolor2)})
end)

window.NameLabel = Instance.new("TextLabel", window.TopBar)
window.NameLabel.TextColor3 = window.theme.toptextcolor
window.NameLabel.Text = window.name
window.NameLabel.TextXAlignment = Enum.TextXAlignment.Left
window.NameLabel.Font = window.theme.font
window.NameLabel.Name = "title"
window.NameLabel.Position = UDim2.fromOffset(4, -2)
window.NameLabel.BackgroundTransparency = 1
window.NameLabel.Size = UDim2.fromOffset(190, window.TopBar.AbsoluteSize.Y / 2 - 2)
window.NameLabel.TextSize = window.theme.titlesize

updateevent.Event:Connect(function(theme)
    window.NameLabel.TextColor3 = theme.toptextcolor
    window.NameLabel.Font = theme.font
    window.NameLabel.TextSize = theme.titlesize
end)

window.Line2 = Instance.new("Frame", window.TopBar)
window.Line2.Name = "line"
window.Line2.Position = UDim2.fromOffset(0, window.TopBar.AbsoluteSize.Y / 2.1)
window.Line2.Size = UDim2.fromOffset(window.size.X.Offset, 1)
window.Line2.BorderSizePixel = 0
window.Line2.BackgroundColor3 = window.theme.accentcolor

updateevent.Event:Connect(function(theme)
    window.Line2.BackgroundColor3 = theme.accentcolor
end)

window.TabList = Instance.new("Frame", window.TopBar)
window.TabList.Name = "tablist"
window.TabList.BackgroundTransparency = 1
window.TabList.Position = UDim2.fromOffset(0, window.TopBar.AbsoluteSize.Y / 2 + 1)
window.TabList.Size = UDim2.fromOffset(window.size.X.Offset, window.TopBar.AbsoluteSize.Y / 2)
window.TabList.BorderSizePixel = 0
window.TabList.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

window.TabList.InputBegan:Connect(dragstart)
window.TabList.InputChanged:Connect(dragend)

window.BlackLine = Instance.new("Frame", window.Frame)
window.BlackLine.Name = "blackline"
window.BlackLine.Size = UDim2.fromOffset(window.size.X.Offset, 1)
window.BlackLine.BorderSizePixel = 0
window.BlackLine.ZIndex = 9
window.BlackLine.BackgroundColor3 = window.theme.outlinecolor2
window.BlackLine.Position = UDim2.fromOffset(0, window.TopBar.AbsoluteSize.Y)

updateevent.Event:Connect(function(theme)
    window.BlackLine.BackgroundColor3 = theme.outlinecolor2
end)

window.BackgroundImage = Instance.new("ImageLabel", window.Frame)
window.BackgroundImage.Name = "background"
window.BackgroundImage.BorderSizePixel = 0
window.BackgroundImage.ScaleType = Enum.ScaleType.Tile
window.BackgroundImage.Position = window.BlackLine.Position + UDim2.fromOffset(0, 1)
window.BackgroundImage.Size = UDim2.fromOffset(window.size.X.Offset, window.size.Y.Offset - window.TopBar.AbsoluteSize.Y - 1)
window.BackgroundImage.Image = window.theme.background or ""
window.BackgroundImage.ImageTransparency = window.BackgroundImage.Image ~= "" and 0 or 1
window.BackgroundImage.ImageColor3 = Color3.new()
window.BackgroundImage.BackgroundColor3 = window.theme.backgroundcolor
window.BackgroundImage.TileSize = UDim2.new(0, window.theme.tilesize, 0, window.theme.tilesize)

updateevent.Event:Connect(function(theme)
    window.BackgroundImage.Image = theme.background or ""
    window.BackgroundImage.ImageTransparency = window.BackgroundImage.Image ~= "" and 0 or 1
    window.BackgroundImage.BackgroundColor3 = theme.backgroundcolor
    window.BackgroundImage.TileSize = UDim2.new(0, theme.tilesize, 0, theme.tilesize)
end)

window.Line = Instance.new("Frame", window.Frame)
window.Line.Name = "line"
window.Line.Position = UDim2.fromOffset(0, 0)
window.Line.Size = UDim2.fromOffset(60, 1)
window.Line.BorderSizePixel = 0
window.Line.BackgroundColor3 = window.theme.accentcolor

updateevent.Event:Connect(function(theme)
    window.Line.BackgroundColor3 = theme.accentcolor
end)

window.ListLayout = Instance.new("UIListLayout", window.TabList)
window.ListLayout.FillDirection = Enum.FillDirection.Horizontal
window.ListLayout.SortOrder = Enum.SortOrder.LayoutOrder

window.OpenedColorPickers = {}
window.Tabs = {}

-- Função para criar um novo tab
function window:CreateTab(name)
    local tab = {}
    tab.name = name or ""

    local size = textservice:GetTextSize(tab.name, window.theme.fontsize, window.theme.font, Vector2.new(200, 300))

    tab.TabButton = Instance.new("TextButton", window.TabList)
    tab.TabButton.TextColor3 = window.theme.tabstextcolor
    tab.TabButton.Text = tab.name
    tab.TabButton.AutoButtonColor = false
    tab.TabButton.Font = window.theme.font
    tab.TabButton.TextYAlignment = Enum.TextYAlignment.Center
    tab.TabButton.BackgroundTransparency = 1
    tab.TabButton.BorderSizePixel = 0
    tab.TabButton.Size = UDim2.fromOffset(size.X + 15, window.TabList.AbsoluteSize.Y - 1)
    tab.TabButton.Name = tab.name
    tab.TabButton.TextSize = window.theme.fontsize

    updateevent.Event:Connect(function(theme)
        local size = textservice:GetTextSize(tab.name, theme.fontsize, theme.font, Vector2.new(200, 300))
        tab.TabButton.TextColor3 = tab.TabButton.Name == "SelectedTab" and theme.accentcolor or theme.tabstextcolor
        tab.TabButton.Font = theme.font
        tab.TabButton.Size = UDim2.fromOffset(size.X + 15, window.TabList.AbsoluteSize.Y - 1)
        tab.TabButton.TextSize = theme.fontsize
    end)

    tab.Left = Instance.new("ScrollingFrame", window.Frame)
    tab.Left.Name = "leftside"
    tab.Left.BorderSizePixel = 0
    tab.Left.Size = UDim2.fromOffset(window.size.X.Offset / 2, window.size.Y.Offset - (window.TopBar.AbsoluteSize.Y + 1))
    tab.Left.BackgroundTransparency = 1
    tab.Left.Visible = false
    tab.Left.ScrollBarThickness = 0
    tab.Left.ScrollingDirection = "Y"
    tab.Left.Position = window.BlackLine.Position + UDim2.fromOffset(0, 1)

    tab.LeftListLayout = Instance.new("UIListLayout", tab.Left)
    tab.LeftListLayout.FillDirection = Enum.FillDirection.Vertical
    tab.LeftListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tab.LeftListLayout.Padding = UDim.new(0, 12)

    tab.LeftListPadding = Instance.new("UIPadding", tab.Left)
    tab.LeftListPadding.PaddingTop = UDim.new(0, 12)
    tab.LeftListPadding.PaddingLeft = UDim.new(0, 12)
    tab.LeftListPadding.PaddingRight = UDim.new(0, 12)

    tab.Right = Instance.new("ScrollingFrame", window.Frame)
    tab.Right.Name = "rightside"
    tab.Right.ScrollBarThickness = 0
    tab.Right.ScrollingDirection = "Y"
    tab.Right.Visible = false
    tab.Right.BorderSizePixel = 0
    tab.Right.Size = UDim2.fromOffset(window.size.X.Offset / 2, window.size.Y.Offset - (window.TopBar.AbsoluteSize.Y + 1))
    tab.Right.BackgroundTransparency = 1
    tab.Right.Position = tab.Left.Position + UDim2.fromOffset(tab.Left.AbsoluteSize.X, 0)

    tab.RightListLayout = Instance.new("UIListLayout", tab.Right)
    tab.RightListLayout.FillDirection = Enum.FillDirection.Vertical
    tab.RightListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tab.RightListLayout.Padding = UDim.new(0, 12)

    tab.RightListPadding = Instance.new("UIPadding", tab.Right)
    tab.RightListPadding.PaddingTop = UDim.new(0, 12)
    tab.RightListPadding.PaddingLeft = UDim.new(0, 6)
    tab.RightListPadding.PaddingRight = UDim.new(0, 12)

    local block = false
    function tab:SelectTab()
        repeat task.wait() until not block

        block = true
        for i, v in (window.Tabs) do
            if v ~= tab then
                v.TabButton.TextColor3 = Color3.fromRGB(230, 230, 230)
                v.TabButton.Name = "Tab"
                v.Left.Visible = false
                v.Right.Visible = false
            end
        end

        tab.TabButton.TextColor3 = window.theme.accentcolor
        tab.TabButton.Name = "SelectedTab"
        tab.Right.Visible = true
        tab.Left.Visible = true
        window.Line:TweenSizeAndPosition(UDim2.fromOffset(size.X + 15, 1), UDim2.new(0, (tab.TabButton.AbsolutePosition.X - window.Frame.AbsolutePosition.X), 0, 0) + (window.BlackLine.Position - UDim2.fromOffset(0, 1)), Enum.EasingDirection.In, Enum.EasingStyle.Sine, 0.15)
        task.wait(0.2)
        block = false
    end

    if #window.Tabs == 0 then
        tab:SelectTab()
    end

    tab.TabButton.MouseButton1Down:Connect(function()
        tab:SelectTab()
    end)

    tab.SectorsLeft = {}
    tab.SectorsRight = {}

    function tab:CreateSector(name, side)
        -- Sector creation logic remains unchanged
    end

    return tab
end
local sector = {}

-- Criando o quadro de fundo do rótulo
sector.LabelBackFrame = linoral.Frame({
    Parent = sector.Main,
    Name = "labelframe",
    ZIndex = 5,
    Size = UDim2.fromOffset(sector.Label.Size.X.Offset, 10),
    BorderSizePixel = 0,
    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
    Position = UDim2.fromOffset(sector.Label.Position.X.Offset, sector.BlackOutline2.Position.Y.Offset)
})

-- Criando os itens
sector.Items = linoral.Frame({
    Parent = sector.Main,
    Name = "items",
    ZIndex = 2,
    BackgroundTransparency = 1,
    Size = UDim2.fromOffset(170, 140),
    AutomaticSize = Enum.AutomaticSize.Y,
    BorderSizePixel = 0
})

sector.ListLayout = linoral.UIListLayout({
    Parent = sector.Items,
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Padding = UDim.new(0, 12)
})

sector.ListPadding = linoral.UIPadding({
    Parent = sector.Items,
    PaddingTop = UDim.new(0, 15),
    PaddingLeft = UDim.new(0, 6),
    PaddingRight = UDim.new(0, 6)
})

-- Função para adicionar um botão
function sector:AddButton(text, callback)
    local button = {}
    button.text = text or ""
    button.callback = callback or function() end

    button.Main = linoral.TextButton({
        Parent = sector.Items,
        Name = "button",
        ZIndex = 5,
        Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 14),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        AutoButtonColor = false,
        Text = "",
        BorderSizePixel = 0
    })

    button.Gradient = linoral.UIGradient({
        Parent = button.Main,
        Rotation = 90,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, window.theme.buttoncolor),
            ColorSequenceKeypoint.new(1, window.theme.buttoncolor2)
        })
    })

    button.BlackOutline2 = linoral.Frame({
        Parent = button.Main,
        Name = "blackline",
        ZIndex = 4,
        Size = button.Main.Size + UDim2.fromOffset(6, 6),
        BorderSizePixel = 0,
        BackgroundColor3 = window.theme.outlinecolor2,
        Position = UDim2.fromOffset(-3, -3)
    })

    -- Continuar com a adição das outlines e rótulos como mostrado no código original...

    button.Label = linoral.TextLabel({
        Parent = button.Main,
        Name = "Label",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -1, 0, 0),
        ZIndex = 5,
        Size = button.Main.Size,
        Font = window.theme.font,
        Text = button.text,
        TextColor3 = window.theme.itemscolor2,
        TextSize = 15,
        TextStrokeTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Center
    })

    -- Conectar o clique no botão à função de callback
    button.Main.MouseButton1Down:Connect(button.callback)

    -- Atualizar tema quando necessário
    updateevent.Event:Connect(function(theme)
        button.Gradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, theme.buttoncolor),
            ColorSequenceKeypoint.new(1, theme.buttoncolor2)
        })
        button.Label.Font = theme.font
        button.Label.TextColor3 = theme.itemscolor
    end)

    -- Função para ajustar o tamanho da interface
    sector:FixSize()

    return button
end

-- Continuar com as funções de adicionar rótulos, toggles, etc., adaptando da mesma maneira.


local toggle = linoral.lib:CreateToggle({
    text = toggle.text or "",
    default = toggle.default or false,
    flag = toggle.flag or "",
    callback = toggle.callback or function() end,
})

toggle:Set = function(value)
    if value then
        toggle.Label.TextColor3 = linoral.lib.theme.itemscolor2
    else
        toggle.Label.TextColor3 = linoral.lib.theme.itemscolor
    end

    toggle.value = value
    toggle.CheckedFrame.Visible = value
    if toggle.flag and toggle.flag ~= "" then
        linoral.lib.flags[toggle.flag] = toggle.value
    end
    pcall(toggle.callback, value)
end

toggle:Get = function()
    return toggle.value
end

toggle:Set(toggle.default)

-- Adicionando Keybind
toggle:AddKeybind = function(default, flag)
    local keybind = linoral.lib:CreateKeybind({
        default = default or "None",
        flag = flag or (toggle.text or "") .. #toggle.Items:GetChildren(),
    })

    keybind:Set = function(key)
        if key == "None" then
            keybind.Main.Text = "[" .. key .. "]"
            keybind.value = key
            if keybind.flag and keybind.flag ~= "" then
                linoral.lib.flags[keybind.flag] = key
            end
        end
        keybind.Main.Text = "[" .. (shorter_keycodes[key.Name] or key.Name) .. "]"
        keybind.value = key
        if keybind.flag and keybind.flag ~= "" then
            linoral.lib.flags[keybind.flag] = keybind.value
        end
    end

    keybind:Get = function()
        return keybind.value
    end

    userinputservice.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            if keybind.Main.Text == "[...]" then
                keybind.Main.TextColor3 = Color3.fromRGB(136, 136, 136)
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    keybind:Set(input.KeyCode)
                else
                    keybind:Set("None")
                end
            else
                if keybind.value ~= "None" and input.KeyCode == keybind.value then
                    toggle:Set(not toggle.CheckedFrame.Visible)
                end
            end
        end
    end)

    table.insert(linoral.lib.items, keybind)

    return keybind
end

-- Adicionando Dropdown
toggle:AddDropdown = function(items, default, multichoice, callback, flag)
    local dropdown = linoral.lib:CreateDropdown({
        items = items or {},
        default = default,
        multichoice = multichoice or false,
        callback = callback or function() end,
        flag = flag or ((toggle.text or "") .. #sector.Items:GetChildren() .. "a")
    })

    return dropdown
end


function toggle:AddDropdown(default, items, multichoice, callback, flag)
    local dropdown = {}

    dropdown.callback = callback or function() end
    dropdown.items = items or {}
    dropdown.multichoice = multichoice or false
    dropdown.flag = flag or (toggle.text or "") .. #sector.Items:GetChildren()

    dropdown.Main = Instance.new("Frame", sector.Items)
    dropdown.Main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 40)
    dropdown.Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    dropdown.Main.BorderSizePixel = 0
    dropdown.Main.ZIndex = 5

    dropdown.Nav = Instance.new("ImageButton", dropdown.Main)
    dropdown.Nav.BackgroundTransparency = 1
    dropdown.Nav.Size = UDim2.fromOffset(24, 24)
    dropdown.Nav.Position = UDim2.fromOffset(dropdown.Main.Size.X.Offset - 28, 8)
    dropdown.Nav.ZIndex = 6
    dropdown.Nav.Image = "rbxassetid://12345678" -- Example icon

    dropdown.ItemsFrame = Instance.new("ScrollingFrame", dropdown.Main)
    dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, 0)
    dropdown.ItemsFrame.Position = UDim2.fromOffset(0, 30)
    dropdown.ItemsFrame.BackgroundTransparency = 1
    dropdown.ItemsFrame.ScrollBarThickness = 4
    dropdown.ItemsFrame.ZIndex = 5
    dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(0, 0)

    dropdown.OutlineItems = Instance.new("Frame", dropdown.Main)
    dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
    dropdown.OutlineItems.BorderSizePixel = 0
    dropdown.OutlineItems.BackgroundColor3 = window.theme.outlinecolor
    dropdown.OutlineItems.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-2, -2)
    dropdown.OutlineItems.Visible = false

    dropdown.BlackOutlineItems = Instance.new("Frame", dropdown.Main)
    dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(-2, -2)
    dropdown.BlackOutlineItems.BorderSizePixel = 0
    dropdown.BlackOutlineItems.BackgroundColor3 = window.theme.outlinecolor2
    dropdown.BlackOutlineItems.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-1, -1)
    dropdown.BlackOutlineItems.Visible = false

    dropdown.IgnoreBackButtons = Instance.new("TextButton", dropdown.Main)
    dropdown.IgnoreBackButtons.BackgroundTransparency = 1
    dropdown.IgnoreBackButtons.BorderSizePixel = 0
    dropdown.IgnoreBackButtons.Position = UDim2.fromOffset(0, dropdown.Main.Size.Y.Offset + 8)
    dropdown.IgnoreBackButtons.Size = UDim2.new(0, 0, 0, 0)
    dropdown.IgnoreBackButtons.ZIndex = 7
    dropdown.IgnoreBackButtons.Text = ""
    dropdown.IgnoreBackButtons.Visible = false
    dropdown.IgnoreBackButtons.AutoButtonColor = false

    if dropdown.flag and dropdown.flag ~= "" then
        library.flags[dropdown.flag] = dropdown.multichoice and {dropdown.default or dropdown.defaultitems[1] or ""} or (dropdown.default or dropdown.defaultitems[1] or "")
    end

    function dropdown:isSelected(item)
        for i, v in (dropdown.values) do
            if v == item then
                return true
            end
        end
        return false
    end

    function dropdown:updateText(text)
        if #text >= 27 then
            text = text:sub(1, 25) .. ".."
        end
        dropdown.SelectedLabel.Text = text
    end

    dropdown.Changed = Instance.new("BindableEvent")
    function dropdown:Set(value)
        if type(value) == "table" then
            dropdown.values = value
            dropdown:updateText(table.concat(value, ", "))
            pcall(dropdown.callback, value)
        else
            dropdown:updateText(value)
            dropdown.values = {value}
            pcall(dropdown.callback, value)
        end

        dropdown.Changed:Fire(value)
        if dropdown.flag and dropdown.flag ~= "" then
            library.flags[dropdown.flag] = dropdown.multichoice and dropdown.values or dropdown.values[1]
        end
    end

    function dropdown:Get()
        return dropdown.multichoice and dropdown.values or dropdown.values[1]
    end

    dropdown.items = {}
    function dropdown:Add(v)
        local Item = Instance.new("TextButton", dropdown.ItemsFrame)
        Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Item.TextColor3 = Color3.fromRGB(255, 255, 255)
        Item.BorderSizePixel = 0
        Item.Position = UDim2.fromOffset(0, 0)
        Item.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset - 4, 20)
        Item.ZIndex = 9
        Item.Text = v
        Item.Name = v
        Item.AutoButtonColor = false
        Item.Font = window.theme.font
        Item.TextSize = 15
        Item.TextXAlignment = Enum.TextXAlignment.Left
        Item.TextStrokeTransparency = 1
        dropdown.ItemsFrame.CanvasSize = dropdown.ItemsFrame.CanvasSize + UDim2.fromOffset(0, Item.AbsoluteSize.Y)

        Item.MouseButton1Down:Connect(function()
            if dropdown.multichoice then
                if dropdown:isSelected(v) then
                    for i2, v2 in (dropdown.values) do
                        if v2 == v then
                            table.remove(dropdown.values, i2)
                        end
                    end
                    dropdown:Set(dropdown.values)
                else
                    table.insert(dropdown.values, v)
                    dropdown:Set(dropdown.values)
                end
                return
            else
                dropdown.Nav.Rotation = 90
                dropdown.ItemsFrame.Visible = false
                dropdown.ItemsFrame.Active = false
                dropdown.OutlineItems.Visible = false
                dropdown.BlackOutlineItems.Visible = false
                dropdown.BlackOutline2Items.Visible = false
                dropdown.IgnoreBackButtons.Visible = false
                dropdown.IgnoreBackButtons.Active = false
            end
            dropdown:Set(v)
            return
        end)

        runservice.RenderStepped:Connect(function()
            if dropdown.multichoice and dropdown:isSelected(v) or dropdown.values[1] == v then
                Item.BackgroundColor3 = Color3.fromRGB(64, 64, 64)
                Item.TextColor3 = window.theme.accentcolor
                Item.Text = " " .. v
            else
                Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                Item.TextColor3 = Color3.fromRGB(255, 255, 255)
                Item.Text = v
            end
        end)

        table.insert(dropdown.items, v)
        dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, math.clamp(#dropdown.items * Item.AbsoluteSize.Y, 20, 156) + 4)
        dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.ItemsFrame.AbsoluteSize.X, (#dropdown.items * Item.AbsoluteSize.Y) + 4)

        dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
        dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
        dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
        dropdown.IgnoreBackButtons.Size = dropdown.ItemsFrame.Size
    end

    function dropdown:Remove(value)
        local item = dropdown.ItemsFrame:FindFirstChild(value)
        if item then
            for i, v in (dropdown.items) do
                if v == value then
                    table.remove(dropdown.items, i)
                end
            end

            dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, math.clamp(#dropdown.items * item.AbsoluteSize.Y, 20, 156) + 4)
            dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.ItemsFrame.AbsoluteSize.X, (#dropdown.items * item.AbsoluteSize.Y) + 4)

            dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
            dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
            dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
            dropdown.IgnoreBackButtons.Size = dropdown.ItemsFrame.Size

            item:Remove()
        end
    end

    for i, v in (dropdown.defaultitems) do
        dropdown:Add(v)
    end

    if dropdown.default then
        dropdown:Set(dropdown.default)
    end

    local MouseButton1Down = function()
        if dropdown.Nav.Rotation == 90 then
            tweenservice:Create(dropdown.Nav, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {Rotation = - 90}):Play()
            if dropdown.items and #dropdown.items ~= 0 then
                dropdown.ItemsFrame.ScrollingEnabled = true
                sector.Main.Parent.ScrollingEnabled = true
                dropdown.ItemsFrame.Visible = true
                dropdown.ItemsFrame.Active = true
                dropdown.IgnoreBackButtons.Visible = true
                dropdown.IgnoreBackButtons.Active = true
                dropdown.OutlineItems.Visible = true
                dropdown.BlackOutlineItems.Visible = true
                dropdown.BlackOutline2Items.Visible = true
            end
        else
            tweenservice:Create(dropdown.Nav, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {Rotation = 90}):Play()
            dropdown.ItemsFrame.ScrollingEnabled = true
            sector.Main.Parent.ScrollingEnabled = true
            dropdown.ItemsFrame.Visible = false
            dropdown.ItemsFrame.Active = false
            dropdown.IgnoreBackButtons.Visible = false
            dropdown.IgnoreBackButtons.Active = false
            dropdown.OutlineItems.Visible = false
            dropdown.BlackOutlineItems.Visible = false
            dropdown.BlackOutline2Items.Visible = false
        end
    end

    dropdown.Main.MouseButton1Down:Connect(MouseButton1Down)
    dropdown.Nav.MouseButton1Down:Connect(MouseButton1Down)

    dropdown.BlackOutline2.MouseEnter:Connect(function()
        dropdown.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
    end)
    dropdown.BlackOutline2.MouseLeave:Connect(function()
        dropdown.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
    end)

    sector:FixSize()
    table.insert(library.items, dropdown)

    return dropdown
end

function toggle:AddTextbox(default, callback, flag)
    local textbox = {}
    textbox.callback = callback or function() end
    textbox.default = default
    textbox.value = ""
    textbox.flag = flag or (toggle.text or "") .. #sector.Items:GetChildren() .. "a"

    textbox.Holder = Instance.new("Frame", sector.Items)
    textbox.Holder.Name = "holder"
    textbox.Holder.ZIndex = 5
    textbox.Holder.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 14)
    textbox.Holder.BorderSizePixel = 0
    textbox.Holder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

    textbox.Gradient = Instance.new("UIGradient", textbox.Holder)
    textbox.Gradient.Rotation = 90
    textbox.Gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1, Color3.fromRGB(39, 39, 39))})

    textbox.Main = Instance.new("TextBox", textbox.Holder)
    textbox.Main.PlaceholderText = ""
    textbox.Main.Text = ""
    textbox.Main.BackgroundTransparency = 1
    textbox.Main.Font = window.theme.font
    textbox.Main.Name = "textbox"
    textbox.Main.MultiLine = false
    textbox.Main.ClearTextOnFocus = false
    textbox.Main.ZIndex = 5
    textbox.Main.TextScaled = true
    textbox.Main.Size = textbox.Holder.Size
    textbox.Main.TextSize = 15
    textbox.Main.TextColor3 = Color3.fromRGB(255, 255, 255)
    textbox.Main.BorderSizePixel = 0
    textbox.Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    textbox.Main.TextXAlignment = Enum.TextXAlignment.Left

    if textbox.flag and textbox.flag ~= "" then
        library.flags[textbox.flag] = textbox.default or ""
    end

    function textbox:Set(text)
        textbox.value = text
        textbox.Main.Text = text
        if textbox.flag and textbox.flag ~= "" then
            library.flags[textbox.flag] = text
        end
        pcall(textbox.callback, text)
    end

    updateevent.Event:Connect(function(theme)
        textbox.Main.Font = theme.font
    end)

    function textbox:Get()
        return textbox.value
    end

    if textbox.default then
        textbox:Set(textbox.default)
    end

    textbox.Main.FocusLost:Connect(function()
        textbox:Set(textbox.Main.Text)
    end)

    textbox.BlackOutline2 = Instance.new("Frame", textbox.Main)
    textbox.BlackOutline2.Name = "blackline"
    textbox.BlackOutline2.ZIndex = 4
    textbox.BlackOutline2.Size = textbox.Main.Size + UDim2.fromOffset(6, 6)
    textbox.BlackOutline2.BorderSizePixel = 0
    textbox.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
    textbox.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
    updateevent.Event:Connect(function(theme)
        textbox.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
    end)

    textbox.Outline = Instance.new("Frame", textbox.Main)
    textbox.Outline.Name = "blackline"
    textbox.Outline.ZIndex = 4
    textbox.Outline.Size = textbox.Main.Size + UDim2.fromOffset(4, 4)
    textbox.Outline.BorderSizePixel = 0
    textbox.Outline.BackgroundColor3 = window.theme.outlinecolor
    textbox.Outline.Position = UDim2.fromOffset(-2, -2)
    updateevent.Event:Connect(function(theme)
        textbox.Outline.BackgroundColor3 = theme.outlinecolor
    end)

    textbox.BlackOutline = Instance.new("Frame", textbox.Main)
    textbox.BlackOutline.Name = "blackline"
    textbox.BlackOutline.ZIndex = 4
    textbox.BlackOutline.Size = textbox.Main.Size + UDim2.fromOffset(2, 2)
    textbox.BlackOutline.BorderSizePixel = 0
    textbox.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
    textbox.BlackOutline.Position = UDim2.fromOffset(-1, -1)
    updateevent.Event:Connect(function(theme)
        textbox.BlackOutline.BackgroundColor3 = theme.outlinecolor2
    end)

    textbox.BlackOutline2.MouseEnter:Connect(function()
        textbox.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
    end)
    textbox.BlackOutline2.MouseLeave:Connect(function()


local colorpicker = linoral.new("ColorPicker")
colorpicker.Main = linoral.frame(colorpicker, {Name = "Main", Size = UDim2.fromOffset(200, 250)})
colorpicker.Main.Position = UDim2.fromOffset(0, 0)

colorpicker.Outline = linoral.frame(colorpicker.Main, {Name = "blackline", ZIndex = 4, Size = colorpicker.Main.Size + UDim2.fromOffset(4, 4), BorderSizePixel = 0, BackgroundColor3 = window.theme.outlinecolor, Position = UDim2.fromOffset(-2, -2)})
colorpicker.BlackOutline = linoral.frame(colorpicker.Main, {Name = "blackline", ZIndex = 4, Size = colorpicker.Main.Size + UDim2.fromOffset(2, 2), BorderSizePixel = 0, BackgroundColor3 = window.theme.outlinecolor2, Position = UDim2.fromOffset(-1, -1)})

colorpicker.MainPicker = linoral.textbutton(colorpicker.Main, {Name = "picker", ZIndex = 100, Visible = false, AutoButtonColor = false, Text = "", Size = UDim2.fromOffset(180, 196), BorderSizePixel = 0, BackgroundColor3 = Color3.fromRGB(40, 40, 40), Position = UDim2.fromOffset(-180, 17)})
colorpicker.BlackOutline3 = linoral.frame(colorpicker.MainPicker, {Name = "blackline", ZIndex = 98, Size = colorpicker.MainPicker.Size + UDim2.fromOffset(6, 6), BorderSizePixel = 0, BackgroundColor3 = window.theme.outlinecolor2, Position = UDim2.fromOffset(-3, -3)})
colorpicker.Outline2 = linoral.frame(colorpicker.MainPicker, {Name = "blackline", ZIndex = 98, Size = colorpicker.MainPicker.Size + UDim2.fromOffset(4, 4), BorderSizePixel = 0, BackgroundColor3 = window.theme.outlinecolor, Position = UDim2.fromOffset(-2, -2)})
colorpicker.BlackOutline3 = linoral.frame(colorpicker.MainPicker, {Name = "blackline", ZIndex = 98, Size = colorpicker.MainPicker.Size + UDim2.fromOffset(2, 2), BorderSizePixel = 0, BackgroundColor3 = window.theme.outlinecolor2, Position = UDim2.fromOffset(-1, -1)})

colorpicker.hue = linoral.imagelabel(colorpicker.MainPicker, {ZIndex = 101, Position = UDim2.new(0, 3, 0, 3), Size = UDim2.new(0, 172, 0, 172), Image = "rbxassetid://4155801252", ScaleType = Enum.ScaleType.Stretch, BackgroundColor3 = Color3.new(1, 0, 0), BorderColor3 = window.theme.outlinecolor2})
colorpicker.hueselectorpointer = linoral.imagelabel(colorpicker.MainPicker, {ZIndex = 101, BackgroundTransparency = 1, BorderSizePixel = 0, Position = UDim2.new(0, 0, 0, 0), Size = UDim2.new(0, 7, 0, 7), Image = "rbxassetid://6885856475"})

colorpicker.selector = linoral.textlabel(colorpicker.MainPicker, {ZIndex = 100, Position = UDim2.new(0, 3, 0, 181), Size = UDim2.new(0, 173, 0, 10), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BorderColor3 = window.theme.outlinecolor2, Text = ""})
colorpicker.gradient = linoral.uigradient(colorpicker.selector, {Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.new(1, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.new(1, 0, 1)), ColorSequenceKeypoint.new(0.33, Color3.new(0, 0, 1)), ColorSequenceKeypoint.new(0.5, Color3.new(0, 1, 1)), ColorSequenceKeypoint.new(0.67, Color3.new(0, 1, 0)), ColorSequenceKeypoint.new(0.83, Color3.new(1, 1, 0)), ColorSequenceKeypoint.new(1, Color3.new(1, 0, 0))})})

colorpicker.pointer = linoral.frame(colorpicker.selector, {ZIndex = 101, BackgroundColor3 = Color3.fromRGB(40, 40, 40), Position = UDim2.new(0, 0, 0, 0), Size = UDim2.new(0, 2, 0, 10), BorderColor3 = Color3.fromRGB(255, 255, 255)})

colorpicker:Set(colorpicker.default)

-- Functions for updating color picker
function colorpicker:RefreshHue()
    -- Logic to update hue
end

function colorpicker:RefreshSelector()
    -- Logic to update selector
end

function colorpicker:Set(value)
    -- Logic to set the selected color
end

function colorpicker:Get(value)
    return colorpicker.value
end

colorpicker.Main.InputBegan:Connect(function(input)
    -- Input event handling
end)

-- Additional event connections and logic

-- Slider
function sector:AddSlider(text, min, max, default, decimals, callback, flag)
    local slider = {}
    slider.text = text or ""
    slider.min = min or 0
    slider.max = max or 100
    slider.default = default or (min and min + max) / 2
    slider.decimals = decimals or 2
    slider.callback = callback or function() end
    slider.flag = flag or text or ""

    -- Main holder
    slider.Main = linoral.frame(sector.Items, UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 14))
    slider.Main.BackgroundTransparency = 1
    slider.Main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 14)

    -- Label
    slider.Label = linoral.textButton(slider.Main, slider.text, window.theme.font, window.theme.itemscolor, 15, Enum.TextXAlignment.Left)

    -- Outline
    slider.Outline = linoral.frame(slider.Main, UDim2.fromOffset(slider.Main.Size.X.Offset + 4, slider.Main.Size.Y.Offset + 4), window.theme.outlinecolor)
    slider.BlackOutline = linoral.frame(slider.Main, UDim2.fromOffset(slider.Main.Size.X.Offset + 2, slider.Main.Size.Y.Offset + 2), window.theme.outlinecolor2)
    
    -- Gradient
    slider.Gradient = linoral.uiGradient(slider.Main, ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1, Color3.fromRGB(41, 41, 41))}))

    -- SlideBar
    slider.SlideBar = linoral.frame(slider.Main, UDim2.fromOffset(0, slider.Main.Size.Y.Offset), Color3.fromRGB(255, 255, 255))
    slider.Gradient2 = linoral.uiGradient(slider.SlideBar, ColorSequence.new({ColorSequenceKeypoint.new(0, window.theme.accentcolor), ColorSequenceKeypoint.new(1, window.theme.accentcolor2)}))

    -- Events
    slider.SlideBar.MouseEnter:Connect(function() slider.BlackOutline.BackgroundColor3 = window.theme.accentcolor end)
    slider.SlideBar.MouseLeave:Connect(function() slider.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2 end)

    function slider:Get()
        return slider.value
    end

    function slider:Set(value)
        slider.value = math.clamp(math.round(value * slider.decimals) / slider.decimals, slider.min, slider.max)
        local percent = 1 - ((slider.max - slider.value) / (slider.max - slider.min))
        if slider.flag and slider.flag ~= "" then
            library.flags[slider.flag] = slider.value
        end
        slider.SlideBar.Size = UDim2.fromOffset(percent * slider.Main.AbsoluteSize.X, slider.Main.AbsoluteSize.Y)
        slider.InputLabel.Text = slider.value
        pcall(slider.callback, slider.value)
    end
    slider:Set(slider.default)

    function slider:Refresh()
        local mousepos = workspace2.CurrentCamera:WorldToViewportPoint(mouse.Hit.Position)
        local percent = math.clamp(mousepos.X - slider.SlideBar.AbsolutePosition.X, 0, slider.Main.AbsoluteSize.X) / slider.Main.AbsoluteSize.X
        local value = math.round((slider.min + (slider.max - slider.min) * percent) * slider.decimals) / slider.decimals
        value = math.clamp(value, slider.min, slider.max)
        slider:Set(value)
    end

    slider.SlideBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            slider:Refresh()
        end
    end)

    slider.SlideBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    slider.Main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            slider:Refresh()
        end
    end)

    slider.Main.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    userinputservice.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            slider:Refresh()
        end
    end)

    sector:FixSize()
    table.insert(library.items, slider)

    return slider
end

-- Textbox
function sector:AddTextbox(text, default, callback, flag)
    local textbox = {}
    textbox.text = text or ""
    textbox.callback = callback or function() end
    textbox.default = default
    textbox.value = ""
    textbox.flag = flag or text or ""

    textbox.Label = linoral.textButton(sector.Items, textbox.text, window.theme.font, window.theme.itemscolor, 15, Enum.TextXAlignment.Left)

    textbox.Holder = linoral.frame(sector.Items, UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 14), Color3.fromRGB(255, 255, 255))

    textbox.Gradient = linoral.uiGradient(textbox.Holder, ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1, Color3.fromRGB(39, 39, 39))}))

    textbox.Main = linoral.textBox(textbox.Holder, textbox.text, window.theme.font, Color3.fromRGB(30, 30, 30), 15, false, 1)

    if textbox.flag and textbox.flag ~= "" then
        library.flags[textbox.flag] = textbox.default or ""
    end

    function textbox:Set(text)
        textbox.value = text
        textbox.Main.Text = text
        if textbox.flag and textbox.flag ~= "" then
            library.flags[textbox.flag] = text
        end
        pcall(textbox.callback, text)
    end

    function textbox:Get()
        return textbox.value
    end

    if textbox.default then
        textbox:Set(textbox.default)
    end

    textbox.Main.FocusLost:Connect(function()
        textbox:Set(textbox.Main.Text)
    end)

    -- Black Outline
    textbox.BlackOutline2 = linoral.frame(textbox.Main, UDim2.fromOffset(textbox.Main.Size.X.Offset + 6, textbox.Main.Size.Y.Offset + 6), window.theme.outlinecolor2)
    updateevent.Event:Connect(function(theme)
        textbox.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
    end)

    sector:FixSize()
    table.insert(library.items, textbox)

    return textbox
end

-- Adiciona um campo de texto
function sector:AddTextbox(text, default, callback, flag)
    local textbox = {
        text = text or "",
        callback = callback or function() end,
        default = default or "",
        value = default or "",
        flag = flag or text or ""
    }

    textbox.MainBack = linoral.frame(sector.Items)
    textbox.MainBack.ZIndex = 7
    textbox.MainBack.Size = sector.Main.Size - UDim2.fromOffset(12, 6)
    textbox.MainBack.BackgroundTransparency = 1

    textbox.Label = linoral.textlabel(textbox.MainBack)
    textbox.Label.Text = textbox.text
    textbox.Label.TextSize = 15
    textbox.Label.ZIndex = 4
    textbox.Label.TextColor3 = window.theme.itemscolor

    textbox.InputLabel = linoral.textbox(textbox.MainBack)
    textbox.InputLabel.Text = textbox.default
    textbox.InputLabel.TextSize = 15
    textbox.InputLabel.ZIndex = 4
    textbox.InputLabel.ClearTextOnFocus = false
    textbox.InputLabel.TextColor3 = window.theme.itemscolor
    textbox.InputLabel.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 60, 12)

    textbox.BlackOutline = linoral.frame(textbox.MainBack)
    textbox.BlackOutline.ZIndex = 4
    textbox.BlackOutline.Size = textbox.MainBack.Size + UDim2.fromOffset(2, 2)
    textbox.BlackOutline.BackgroundColor3 = window.theme.outlinecolor
    textbox.BlackOutline.Position = UDim2.fromOffset(-1, -1)

    -- Atualiza cores de tema
    updateevent.Event:Connect(function(theme)
        textbox.Label.TextColor3 = theme.itemscolor
        textbox.InputLabel.TextColor3 = theme.itemscolor
        textbox.BlackOutline.BackgroundColor3 = theme.outlinecolor
    end)

    textbox.InputLabel.FocusLost:Connect(function(Return)
        if Return then
            textbox.value = textbox.InputLabel.Text
            textbox.callback(textbox.value)
        end
    end)

    sector:FixSize()
    table.insert(library.items, textbox)

    return textbox
end

-- Adiciona um slider
function sector:AddSlider(text, min, default, max, decimals, callback, flag)
    local slider = {
        text = text or "",
        callback = callback or function(value) end,
        min = min or 0,
        max = max or 100,
        decimals = decimals or 1,
        default = default or min,
        flag = flag or text or "",
        value = default or min
    }

    slider.MainBack = linoral.frame(sector.Items)
    slider.MainBack.ZIndex = 7
    slider.MainBack.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 25)
    slider.MainBack.BackgroundTransparency = 1

    slider.Label = linoral.textlabel(slider.MainBack)
    slider.Label.Text = slider.text
    slider.Label.TextSize = 15
    slider.Label.TextColor3 = window.theme.itemscolor

    slider.InputLabel = linoral.textbox(slider.MainBack)
    slider.InputLabel.Text = "0"
    slider.InputLabel.TextSize = 15
    slider.InputLabel.TextColor3 = window.theme.itemscolor
    slider.InputLabel.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 60, 12)

    slider.Main = linoral.button(slider.MainBack)
    slider.Main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 12)
    slider.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    slider.Main.ZIndex = 5
    slider.Main.AutoButtonColor = false
    slider.Main.Text = ""

    slider.Gradient = linoral.gradient(slider.Main, 90)
    slider.Gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1, Color3.fromRGB(41, 41, 41))})

    slider.SlideBar = linoral.frame(slider.Main)
    slider.SlideBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    slider.SlideBar.Size = UDim2.fromOffset(0, slider.Main.Size.Y.Offset)
    slider.SlideBar.ZIndex = 5

    -- Gradientes e atualizações de tema
    slider.Gradient2 = linoral.gradient(slider.SlideBar, 90)
    slider.Gradient2.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, window.theme.accentcolor), ColorSequenceKeypoint.new(1, window.theme.accentcolor2)})
    updateevent.Event:Connect(function(theme)
        slider.Gradient2.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, theme.accentcolor), ColorSequenceKeypoint.new(1, theme.accentcolor2)})
    end)

    slider:Set(slider.default)

    slider.SlideBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            slider:Refresh()
        end
    end)

    slider.SlideBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    slider.Main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            slider:Refresh()
        end
    end)

    slider.Main.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    userinputservice.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            slider:Refresh()
        end
    end)

    sector:FixSize()
    table.insert(library.items, slider)

    return slider
end

-- Adiciona um colorpicker
function sector:AddColorpicker(text, default, callback, flag)
    local colorpicker = {
        text = text or "",
        callback = callback or function() end,
        default = default or Color3.fromRGB(255, 255, 255),
        value = default or Color3.fromRGB(255, 255, 255),
        flag = flag or text or ""
    }

    colorpicker.Label = linoral.textlabel(sector.Items)
    colorpicker.Label.Text = colorpicker.text
    colorpicker.Label.TextSize = 15
    colorpicker.Label.TextColor3 = window.theme.itemscolor

    colorpicker.Main = linoral.frame(colorpicker.Label)
    colorpicker.Main.Size = UDim2.fromOffset(16, 10)
    colorpicker.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

    colorpicker.Gradient = linoral.gradient(colorpicker.Main, 90)
    local clr = Color3.new(math.clamp(colorpicker.value.R / 1.7, 0, 1), math.clamp(colorpicker.value.G / 1.7, 0, 1), math.clamp(colorpicker.value.B / 1.7, 0, 1))
    colorpicker.Gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0.00, colorpicker.value), ColorSequenceKeypoint.new(1.00, clr)})

    colorpicker.MainPicker = linoral.button(colorpicker.Main)
    colorpicker.MainPicker.Text = ""
    colorpicker.MainPicker.Visible = false
    colorpicker.MainPicker.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

    -- Atualizações de cores
    updateevent.Event:Connect(function(theme)
        colorpicker.Gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0.00, colorpicker.value), ColorSequenceKeypoint.new(1.00, clr)})
    end)

    colorpicker.MainPicker.MouseEnter:Connect(function()
        colorpicker.MainPicker.BackgroundColor3 = window.theme.accentcolor
    end)
    colorpicker.MainPicker.MouseLeave:Connect(function()
        colorpicker.MainPicker.BackgroundColor3 = window.theme.outlinecolor2
    end)

    sector:FixSize()
    table.insert(library.items, colorpicker)

    return colorpicker
end

colorpicker.Outline2 = linoral.Frame(colorpicker.MainPicker, {
    Name = "blackline",
    ZIndex = 98,
    Size = colorpicker.MainPicker.Size + UDim2.fromOffset(4, 4),
    BorderSizePixel = 0,
    BackgroundColor3 = window.theme.outlinecolor,
    Position = UDim2.fromOffset(-2, -2)
})
updateevent.Event:Connect(function(theme)
    colorpicker.Outline2.BackgroundColor3 = theme.outlinecolor
end)

colorpicker.BlackOutline3 = linoral.Frame(colorpicker.MainPicker, {
    Name = "blackline",
    ZIndex = 98,
    Size = colorpicker.MainPicker.Size + UDim2.fromOffset(2, 2),
    BorderSizePixel = 0,
    BackgroundColor3 = window.theme.outlinecolor2,
    Position = UDim2.fromOffset(-1, -1)
})
updateevent.Event:Connect(function(theme)
    colorpicker.BlackOutline3.BackgroundColor3 = theme.outlinecolor2
end)

colorpicker.hue = linoral.ImageLabel(colorpicker.MainPicker, {
    ZIndex = 101,
    Position = UDim2.new(0, 3, 0, 3),
    Size = UDim2.new(0, 172, 0, 172),
    Image = "rbxassetid://4155801252",
    ScaleType = Enum.ScaleType.Stretch,
    BackgroundColor3 = Color3.new(1, 0, 0),
    BorderColor3 = window.theme.outlinecolor2
})
updateevent.Event:Connect(function(theme)
    colorpicker.hue.BorderColor3 = theme.outlinecolor2
end)

colorpicker.hueselectorpointer = linoral.ImageLabel(colorpicker.MainPicker, {
    ZIndex = 101,
    BackgroundTransparency = 1,
    BorderSizePixel = 0,
    Position = UDim2.new(0, 0, 0, 0),
    Size = UDim2.new(0, 7, 0, 7),
    Image = "rbxassetid://6885856475"
})

colorpicker.selector = linoral.TextLabel(colorpicker.MainPicker, {
    ZIndex = 100,
    Position = UDim2.new(0, 3, 0, 181),
    Size = UDim2.new(0, 173, 0, 10),
    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
    BorderColor3 = window.theme.outlinecolor2,
    Text = ""
})
updateevent.Event:Connect(function(theme)
    colorpicker.selector.BorderColor3 = theme.outlinecolor2
end)

colorpicker.gradient = linoral.UIGradient(colorpicker.selector, {
    Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.new(1, 0, 0)),
        ColorSequenceKeypoint.new(0.17, Color3.new(1, 0, 1)),
        ColorSequenceKeypoint.new(0.33, Color3.new(0, 0, 1)),
        ColorSequenceKeypoint.new(0.5, Color3.new(0, 1, 1)),
        ColorSequenceKeypoint.new(0.67, Color3.new(0, 1, 0)),
        ColorSequenceKeypoint.new(0.83, Color3.new(1, 1, 0)),
        ColorSequenceKeypoint.new(1, Color3.new(1, 0, 0))
    })
})

colorpicker.pointer = linoral.Frame(colorpicker.selector, {
    ZIndex = 101,
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    Position = UDim2.new(0, 0, 0, 0),
    Size = UDim2.new(0, 2, 0, 10),
    BorderColor3 = Color3.fromRGB(255, 255, 255)
})

if colorpicker.flag and colorpicker.flag ~= "" then
    library.flags[colorpicker.flag] = colorpicker.default
end

function colorpicker:RefreshSelector()
    local pos = math.clamp((mouse.X - colorpicker.hue.AbsolutePosition.X) / colorpicker.hue.AbsoluteSize.X, 0, 1)
    colorpicker.color = 1 - pos
    colorpicker.pointer:TweenPosition(UDim2.new(pos, 0, 0, 0), Enum.EasingDirection.In, Enum.EasingStyle.Sine, 0.05)
    colorpicker.hue.BackgroundColor3 = Color3.fromHSV(1 - pos, 1, 1)
end

function colorpicker:RefreshHue()
    local x = (mouse.X - colorpicker.hue.AbsolutePosition.X) / colorpicker.hue.AbsoluteSize.X
    local y = (mouse.Y - colorpicker.hue.AbsolutePosition.Y) / colorpicker.hue.AbsoluteSize.Y
    colorpicker.hueselectorpointer:TweenPosition(UDim2.new(math.clamp(x * colorpicker.hue.AbsoluteSize.X, 0.5, 0.952 * colorpicker.hue.AbsoluteSize.X) / colorpicker.hue.AbsoluteSize.X, 0, math.clamp(y * colorpicker.hue.AbsoluteSize.Y, 0.5, 0.885 * colorpicker.hue.AbsoluteSize.Y) / colorpicker.hue.AbsoluteSize.Y, 0), Enum.EasingDirection.In, Enum.EasingStyle.Sine, 0.05)
    colorpicker:Set(Color3.fromHSV(colorpicker.color, math.clamp(x * colorpicker.hue.AbsoluteSize.X, 0.5, 1 * colorpicker.hue.AbsoluteSize.X) / colorpicker.hue.AbsoluteSize.X, 1 - (math.clamp(y * colorpicker.hue.AbsoluteSize.Y, 0.5, 1 * colorpicker.hue.AbsoluteSize.Y) / colorpicker.hue.AbsoluteSize.Y)))
end

function colorpicker:Set(value)
    local color = Color3.new(math.clamp(value.r, 0, 1), math.clamp(value.g, 0, 1), math.clamp(value.b, 0, 1))
    colorpicker.value = color
    if colorpicker.flag and colorpicker.flag ~= "" then
        library.flags[colorpicker.flag] = color
    end
    local clr = Color3.new(math.clamp(color.R / 1.7, 0, 1), math.clamp(color.G / 1.7, 0, 1), math.clamp(color.B / 1.7, 0, 1))
    colorpicker.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, color), ColorSequenceKeypoint.new(1.00, clr) })
    pcall(colorpicker.callback, color)
end

function colorpicker:Get()
    return colorpicker.value
end

colorpicker:Set(colorpicker.default)

function colorpicker:AddDropdown(items, default, multichoice, callback, flag)
    local dropdown = {}

    dropdown.defaultitems = items or {}
    dropdown.default = default
    dropdown.callback = callback or function() end
    dropdown.multichoice = multichoice or false
    dropdown.values = {}
    dropdown.flag = flag or ((colorpicker.text or "") .. tostring(#(sector.Items:GetChildren())))

    dropdown.Main = linoral.TextButton(sector.Items, {
        Name = "dropdown",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 16),
        Position = UDim2.fromOffset(0, 0),
        ZIndex = 5,
        AutoButtonColor = false,
        Font = window.theme.font,
        Text = "",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 15,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    updateevent.Event:Connect(function(theme)
        dropdown.Main.Font = theme.font
    end)

    dropdown.Gradient = linoral.UIGradient(dropdown.Main, {
        Rotation = 90,
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, Color3.fromRGB(49, 49, 49)),
            ColorSequenceKeypoint.new(1.00, Color3.fromRGB(39, 39, 39))
        }
    })

    dropdown.SelectedLabel = linoral.TextLabel(dropdown.Main, {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(5, 2),
        Size = UDim2.fromOffset(130, 13),
        Font = window.theme.font,
        Text = colorpicker.text,
        ZIndex = 5,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 15,
        TextStrokeTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    updateevent.Event:Connect(function(theme)
        dropdown.SelectedLabel.Font = theme.font
    end)

    dropdown.Nav = linoral.ImageButton(dropdown.Main, {
        Name = "navigation",
        BackgroundTransparency = 1,
        LayoutOrder = 10,
        Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 26, 5),
        Rotation = 90,
        ZIndex = 5,
        Size = UDim2.fromOffset(8, 8),
        Image = "rbxassetid://4918373417",
        ImageColor3 = Color3.fromRGB(210, 210, 210)
    })

    dropdown.BlackOutline2 = linoral.Frame(dropdown.Main, {
        Name = "blackline",
        ZIndex = 4,
        Size = dropdown.Main.Size + UDim2.fromOffset(6, 6),
        BorderSizePixel = 0,
        BackgroundColor3 = window.theme.outlinecolor2,
        Position = UDim2.fromOffset(-3, -3)
    })
    updateevent.Event:Connect(function(theme)
        dropdown.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
    end)

    dropdown.Outline = linoral.Frame(dropdown.Main, {
        Name = "blackline",
        ZIndex = 4,
        Size = dropdown.Main.Size + UDim2.fromOffset(4, 4),
        BorderSizePixel = 0,
        BackgroundColor3 = window.theme.outlinecolor,
        Position = UDim2.fromOffset(-2, -2)
    })
    updateevent.Event:Connect(function(theme)
        dropdown.Outline.BackgroundColor3 = theme.outlinecolor
    end)

    dropdown.BlackOutline = linoral.Frame(dropdown.Main, {
        Name = "blackline",
        ZIndex = 4,
        Size = dropdown.Main.Size + UDim2.fromOffset(2, 2),
        BorderSizePixel = 0,
        BackgroundColor3 = window.theme.outlinecolor2,
        Position = UDim2.fromOffset(-1, -1)
    })
    updateevent.Event:Connect(function(theme)
        dropdown.BlackOutline.BackgroundColor3 = theme.outlinecolor2
    end)
end



local dropdown = linoral.create("Dropdown", function(self)
    self.flag = dropdown.flag or ""
    self.default = dropdown.default or ""
    self.defaultitems = dropdown.defaultitems or {}
    self.multichoice = dropdown.multichoice or false
    self.callback = dropdown.callback or function() end
    self.values = {}

    -- Main UI elements
    self.Main = linoral.create("Frame", self.Main)
    self.Main.BackgroundColor3 = window.theme.bgcolor
    self.Main.Size = UDim2.fromOffset(200, 40)
    self.Main.Position = UDim2.fromOffset(10, 10)
    
    self.Nav = linoral.create("ImageLabel", self.Main)
    self.Nav.Rotation = 90
    self.Nav.BackgroundTransparency = 1
    self.Nav.Position = UDim2.fromOffset(180, 0)
    self.Nav.Size = UDim2.fromOffset(20, 20)
    self.Nav.Image = "rbxassetid://11924458788"
    
    -- Items Frame
    self.ItemsFrame = linoral.create("ScrollingFrame", self.Main)
    self.ItemsFrame.Position = UDim2.fromOffset(0, self.Main.Size.Y.Offset + 8)
    self.ItemsFrame.Size = UDim2.fromOffset(self.Main.AbsoluteSize.X, 0)
    self.ItemsFrame.ScrollBarThickness = 2
    self.ItemsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    self.ItemsFrame.Visible = false
    self.ItemsFrame.CanvasSize = UDim2.fromOffset(self.Main.AbsoluteSize.X, 0)
    
    -- List Layout and Padding
    self.ListLayout = linoral.create("UIListLayout", self.ItemsFrame)
    self.ListLayout.FillDirection = Enum.FillDirection.Vertical
    self.ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    
    self.ListPadding = linoral.create("UIPadding", self.ItemsFrame)
    self.ListPadding.PaddingTop = UDim.new(0, 2)
    self.ListPadding.PaddingBottom = UDim.new(0, 2)
    self.ListPadding.PaddingLeft = UDim.new(0, 2)
    self.ListPadding.PaddingRight = UDim.new(0, 2)

    -- Outline and Background
    self.BlackOutline2Items = linoral.create("Frame", self.Main)
    self.BlackOutline2Items.Size = self.ItemsFrame.Size + UDim2.fromOffset(6, 6)
    self.BlackOutline2Items.BorderSizePixel = 0
    self.BlackOutline2Items.BackgroundColor3 = window.theme.outlinecolor2
    self.BlackOutline2Items.Position = self.ItemsFrame.Position + UDim2.fromOffset(-3, -3)
    self.BlackOutline2Items.Visible = false

    self.OutlineItems = linoral.create("Frame", self.Main)
    self.OutlineItems.Size = self.ItemsFrame.Size + UDim2.fromOffset(4, 4)
    self.OutlineItems.BorderSizePixel = 0
    self.OutlineItems.BackgroundColor3 = window.theme.outlinecolor
    self.OutlineItems.Position = self.ItemsFrame.Position + UDim2.fromOffset(-2, -2)
    self.OutlineItems.Visible = false

    self.BlackOutlineItems = linoral.create("Frame", self.Main)
    self.BlackOutlineItems.Size = self.ItemsFrame.Size + UDim2.fromOffset(-2, -2)
    self.BlackOutlineItems.BorderSizePixel = 0
    self.BlackOutlineItems.BackgroundColor3 = window.theme.outlinecolor2
    self.BlackOutlineItems.Position = self.ItemsFrame.Position + UDim2.fromOffset(-1, -1)
    self.BlackOutlineItems.Visible = false

    -- Ignore Back Buttons
    self.IgnoreBackButtons = linoral.create("TextButton", self.Main)
    self.IgnoreBackButtons.BackgroundTransparency = 1
    self.IgnoreBackButtons.Position = UDim2.fromOffset(0, self.Main.Size.Y.Offset + 8)
    self.IgnoreBackButtons.Size = UDim2.new(0, 0, 0, 0)
    self.IgnoreBackButtons.ZIndex = 7
    self.IgnoreBackButtons.Text = ""
    self.IgnoreBackButtons.Visible = false
    self.IgnoreBackButtons.AutoButtonColor = false

    -- Flag initialization
    if self.flag and self.flag ~= "" then
        library.flags[self.flag] = self.multichoice and { self.default or self.defaultitems[1] or "" } or (self.default or self.defaultitems[1] or "")
    end

    -- Functions
    function self:isSelected(item)
        for _, v in ipairs(self.values) do
            if v == item then
                return true
            end
        end
        return false
    end

    function self:updateText(text)
        if #text >= 27 then
            text = text:sub(1, 25) .. ".."
        end
        self.SelectedLabel.Text = text
    end

    self.Changed = linoral.create("BindableEvent")
    function self:Set(value)
        if type(value) == "table" then
            self.values = value
            self:updateText(table.concat(value, ", "))
            pcall(self.callback, value)
        else
            self:updateText(value)
            self.values = { value }
            pcall(self.callback, value)
        end

        self.Changed:Fire(value)
        if self.flag and self.flag ~= "" then
            library.flags[self.flag] = self.multichoice and self.values or self.values[1]
        end
    end

    function self:Get()
        return self.multichoice and self.values or self.values[1]
    end

    self.items = {}
    function self:Add(v)
        local Item = linoral.create("TextButton", self.ItemsFrame)
        Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Item.TextColor3 = Color3.fromRGB(255, 255, 255)
        Item.BorderSizePixel = 0
        Item.Position = UDim2.fromOffset(0, 0)
        Item.Size = UDim2.fromOffset(self.Main.Size.X.Offset - 4, 20)
        Item.ZIndex = 9
        Item.Text = v
        Item.Name = v
        Item.AutoButtonColor = false
        Item.Font = window.theme.font
        Item.TextSize = 15
        Item.TextXAlignment = Enum.TextXAlignment.Left
        Item.TextStrokeTransparency = 1
        self.ItemsFrame.CanvasSize = self.ItemsFrame.CanvasSize + UDim2.fromOffset(0, Item.AbsoluteSize.Y)

        -- Item interaction
        Item.MouseButton1Down:Connect(function()
            if self.multichoice then
                if self:isSelected(v) then
                    for i2, v2 in ipairs(self.values) do
                        if v2 == v then
                            table.remove(self.values, i2)
                        end
                    end
                    self:Set(self.values)
                else
                    table.insert(self.values, v)
                    self:Set(self.values)
                end

                return
            else
                self.Nav.Rotation = 90
                self.ItemsFrame.Visible = false
                self.ItemsFrame.Active = false
                self.OutlineItems.Visible = false
                self.BlackOutlineItems.Visible = false
                self.BlackOutline2Items.Visible = false
                self.IgnoreBackButtons.Visible = false
                self.IgnoreBackButtons.Active = false
            end

            self:Set(v)
            return
        end)

        table.insert(self.items, v)
        self.ItemsFrame.Size = UDim2.fromOffset(self.Main.Size.X.Offset, math.clamp(#self.items * Item.AbsoluteSize.Y, 20, 156) + 4)
        self.ItemsFrame.CanvasSize = UDim2.fromOffset(self.ItemsFrame.AbsoluteSize.X, (#self.items * Item.AbsoluteSize.Y) + 4)

        self.OutlineItems.Size = self.ItemsFrame.Size + UDim2.fromOffset(4, 4)
        self.BlackOutlineItems.Size = self.ItemsFrame.Size + UDim2.fromOffset(2, 2)
        self.BlackOutline2Items.Size = self.ItemsFrame.Size + UDim2.fromOffset(6, 6)
        self.IgnoreBackButtons.Size = self.ItemsFrame.Size
    end

    function self:Remove(value)
        local item = self.ItemsFrame:FindFirstChild(value)
        if item then
            for i, v in ipairs(self.items) do
                if v == value then
                    table.remove(self.items, i)
                end
            end

            self.ItemsFrame.Size = UDim2.fromOffset(self.Main.Size.X.Offset, math.clamp(#self.items * item.AbsoluteSize.Y, 20, 156) + 4)
            self.ItemsFrame.CanvasSize = UDim2.fromOffset(self.ItemsFrame.AbsoluteSize.X, (#self.items * item.AbsoluteSize.Y) + 4)

            self.OutlineItems.Size = self.ItemsFrame.Size + UDim2.fromOffset(2, 2)
            self.BlackOutlineItems.Size = self.ItemsFrame.Size + UDim2.fromOffset(4, 4)
            self.BlackOutline2Items.Size = self.ItemsFrame.Size + UDim2.fromOffset(6, 6)
            self.IgnoreBackButtons.Size = self.ItemsFrame.Size

            item:Remove()
        end
    end

    -- Add default items
    for _, v in ipairs(self.defaultitems) do
        self:Add(v)
    end

    if self.default then
        self:Set(self.default)
    end

    return self
end)

local shorter_keycodes = {
    ["LeftShift"] = "LSHIFT", 
    ["RightShift"] = "RSHIFT", 
    ["LeftControl"] = "LCTRL", 
    ["RightControl"] = "RCTRL", 
    ["LeftAlt"] = "LALT", 
    ["RightAlt"] = "RALT"
}

function keybind:Set(value)
    if value == "None" then
        keybind.value = value
        keybind.Bind.Text = "[" .. value .. "]"

        local size = textservice:GetTextSize(keybind.Bind.Text, keybind.Bind.TextSize, keybind.Bind.Font, Vector2.new(2000, 2000))
        keybind.Bind.Size = UDim2.fromOffset(size.X, size.Y)
        keybind.Bind.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 10 - keybind.Bind.AbsoluteSize.X, 0)
        if keybind.flag and keybind.flag ~= "" then
            library.flags[keybind.flag] = value
        end
        pcall(keybind.newkeycallback, value)
    end

    keybind.value = value
    keybind.Bind.Text = "[" .. (shorter_keycodes[value.Name or value] or (value.Name or value)) .. "]"

    local size = textservice:GetTextSize(keybind.Bind.Text, keybind.Bind.TextSize, keybind.Bind.Font, Vector2.new(2000, 2000))
    keybind.Bind.Size = UDim2.fromOffset(size.X, size.Y)
    keybind.Bind.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 10 - keybind.Bind.AbsoluteSize.X, 0)
    if keybind.flag and keybind.flag ~= "" then
        library.flags[keybind.flag] = value
    end
    pcall(keybind.newkeycallback, value)
end
keybind:Set(keybind.default and keybind.default or "None")

function keybind:Get()
    return keybind.value
end

userinputservice.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if keybind.Bind.Text == "[...]" then
            keybind.Bind.TextColor3 = Color3.fromRGB(136, 136, 136)
            if input.UserInputType == Enum.UserInputType.Keyboard then
                keybind:Set(input.KeyCode)
            else
                keybind:Set("None")
            end
        else
            if keybind.value ~= "None" and input.KeyCode == keybind.value then
                pcall(keybind.callback)
            end
        end
    end
end)

sector:FixSize()
table.insert(library.items, keybind)

return keybind
end

function sector:AddDropdown(text, items, default, multichoice, callback, flag)
    local dropdown = {}

    dropdown.text = text or ""
    dropdown.defaultitems = items or {}
    dropdown.default = default
    dropdown.callback = callback or function() end
    dropdown.multichoice = multichoice or false
    dropdown.values = {}
    dropdown.flag = flag or text or ""

    dropdown.MainBack = Instance.new("Frame", sector.Items)
    dropdown.MainBack.Name = "backlabel"
    dropdown.MainBack.ZIndex = 7
    dropdown.MainBack.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 34)
    dropdown.MainBack.BorderSizePixel = 0
    dropdown.MainBack.BackgroundTransparency = 1

    dropdown.Label = Instance.new("TextLabel", dropdown.MainBack)
    dropdown.Label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    dropdown.Label.BackgroundTransparency = 1
    dropdown.Label.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 10)
    dropdown.Label.Position = UDim2.fromOffset(0, 0)
    dropdown.Label.Font = window.theme.font
    dropdown.Label.Text = dropdown.text
    dropdown.Label.ZIndex = 4
    dropdown.Label.TextColor3 = window.theme.itemscolor
    dropdown.Label.TextSize = 15
    dropdown.Label.TextStrokeTransparency = 1
    dropdown.Label.TextXAlignment = Enum.TextXAlignment.Left

    updateevent.Event:Connect(function(theme)
        dropdown.Label.Font = theme.font
        dropdown.Label.TextColor3 = theme.itemscolor
    end)

    dropdown.Main = Instance.new("TextButton", dropdown.MainBack)
    dropdown.Main.Name = "dropdown"
    dropdown.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    dropdown.Main.BorderSizePixel = 0
    dropdown.Main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 16)
    dropdown.Main.Position = UDim2.fromOffset(0, 17)
    dropdown.Main.ZIndex = 5
    dropdown.Main.AutoButtonColor = false
    dropdown.Main.Font = window.theme.font
    dropdown.Main.Text = ""
    dropdown.Main.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdown.Main.TextSize = 15
    dropdown.Main.TextXAlignment = Enum.TextXAlignment.Left
    updateevent.Event:Connect(function(theme)
        dropdown.Main.Font = theme.font
    end)

    dropdown.Gradient = Instance.new("UIGradient", dropdown.Main)
    dropdown.Gradient.Rotation = 90
    dropdown.Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1, Color3.fromRGB(39, 39, 39))}

    dropdown.SelectedLabel = Instance.new("TextLabel", dropdown.Main)
    dropdown.SelectedLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    dropdown.SelectedLabel.BackgroundTransparency = 1
    dropdown.SelectedLabel.Position = UDim2.fromOffset(5, 2)
    dropdown.SelectedLabel.Size = UDim2.fromOffset(130, 13)
    dropdown.SelectedLabel.Font = window.theme.font
    dropdown.SelectedLabel.Text = dropdown.text
    dropdown.SelectedLabel.ZIndex = 5
    dropdown.SelectedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdown.SelectedLabel.TextSize = 15
    dropdown.SelectedLabel.TextStrokeTransparency = 1
    dropdown.SelectedLabel.TextXAlignment = Enum.TextXAlignment.Left
    updateevent.Event:Connect(function(theme)
        dropdown.SelectedLabel.Font = theme.font
    end)

    dropdown.Nav = Instance.new("ImageButton", dropdown.Main)
    dropdown.Nav.Name = "navigation"
    dropdown.Nav.BackgroundTransparency = 1
    dropdown.Nav.LayoutOrder = 10
    dropdown.Nav.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 26, 5)
    dropdown.Nav.Rotation = 90
    dropdown.Nav.ZIndex = 5
    dropdown.Nav.Size = UDim2.fromOffset(8, 8)
    dropdown.Nav.Image = "rbxassetid://4918373417"
    dropdown.Nav.ImageColor3 = Color3.fromRGB(210, 210, 210)

    dropdown.BlackOutline2 = Instance.new("Frame", dropdown.Main)
    dropdown.BlackOutline2.Name = "blackline"
    dropdown.BlackOutline2.ZIndex = 4
    dropdown.BlackOutline2.Size = dropdown.Main.Size + UDim2.fromOffset(6, 6)
    dropdown.BlackOutline2.BorderSizePixel = 0
    dropdown.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
    dropdown.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
    updateevent.Event:Connect(function(theme)
        dropdown.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
    end)

    dropdown.Outline = Instance.new("Frame", dropdown.Main)
    dropdown.Outline.Name = "blackline"
    dropdown.Outline.ZIndex = 4
    dropdown.Outline.Size = dropdown.Main.Size + UDim2.fromOffset(4, 4)
    dropdown.Outline.BorderSizePixel = 0
    dropdown.Outline.BackgroundColor3 = window.theme.outlinecolor
    dropdown.Outline.Position = UDim2.fromOffset(-2, -2)
    updateevent.Event:Connect(function(theme)
        dropdown.Outline.BackgroundColor3 = theme.outlinecolor
    end)

    dropdown.BlackOutline = Instance.new("Frame", dropdown.Main)
    dropdown.BlackOutline.Name = "blackline"
    dropdown.BlackOutline.ZIndex = 4
    dropdown.BlackOutline.Size = dropdown.Main.Size + UDim2.fromOffset(2, 2)
    dropdown.BlackOutline.BorderSizePixel = 0
    dropdown.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
    dropdown.BlackOutline.Position = UDim2.fromOffset(-1, -1)
    updateevent.Event:Connect(function(theme)
        dropdown.BlackOutline.BackgroundColor3 = theme.outlinecolor2
    end)

    dropdown.ItemsFrame = Instance.new("ScrollingFrame", dropdown.Main)
    dropdown.ItemsFrame.Name = "itemsframe"
    dropdown.ItemsFrame.BorderSizePixel = 0
    dropdown.ItemsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    dropdown.ItemsFrame.Position = UDim2.fromOffset(0, dropdown.Main.Size.Y.Offset + 8)
    dropdown.ItemsFrame.ScrollBarThickness = 2
    dropdown.ItemsFrame.ZIndex = 8
    dropdown.ItemsFrame.ScrollingDirection = "Y"
    dropdown.ItemsFrame.Visible = false
    dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.Main.AbsoluteSize.X, 0)

    dropdown.ListLayout = Instance.new("UIListLayout", dropdown.ItemsFrame)
    dropdown.ListLayout.FillDirection = Enum.FillDirection.Vertical
    dropdown.ListLayout.SortOrder = Enum.SortOrder.LayoutOrder

    dropdown.ListPadding = Instance.new("UIPadding", dropdown.ItemsFrame)
    dropdown.ListPadding.PaddingTop = UDim.new(0, 2)
    dropdown.ListPadding.PaddingBottom = UDim.new(0, 2)
    dropdown.ListPadding.PaddingLeft = UDim.new(0, 2)
    dropdown.ListPadding.PaddingRight = UDim.new(0, 2)

    dropdown.BlackOutline2Items = Instance.new("Frame", dropdown.Main)
    dropdown.BlackOutline2Items.Name = "blackline"
    dropdown.BlackOutline2Items.ZIndex = 7
    dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
    dropdown.BlackOutline2Items.BorderSizePixel = 0
    dropdown.BlackOutline2Items.BackgroundColor3 = window.theme.outlinecolor2
    dropdown.BlackOutline2Items.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-3, -3)
    dropdown.BlackOutline2Items.Visible = false
    updateevent.Event:Connect(function(theme)
        dropdown.BlackOutline2Items.BackgroundColor3 = theme.outlinecolor2
    end)

    dropdown.OutlineItems = Instance.new("Frame", dropdown.Main)
    dropdown.OutlineItems.Name = "blackline"
    dropdown.OutlineItems.ZIndex = 7
    dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
    dropdown.OutlineItems.BorderSizePixel = 0
    dropdown.OutlineItems.BackgroundColor3 = window.theme.outlinecolor
    dropdown.OutlineItems.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-2, -2)
    dropdown.OutlineItems.Visible = false
    updateevent.Event:Connect(function(theme)
        dropdown.OutlineItems.BackgroundColor3 = theme.outlinecolor
    end)

    dropdown.BlackOutlineItems = Instance.new("Frame", dropdown.Main)
    dropdown.BlackOutlineItems.Name = "blackline"
    dropdown.BlackOutlineItems.ZIndex = 7
    dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(-2, -2)
    dropdown.BlackOutlineItems.BorderSizePixel = 0
    dropdown.BlackOutlineItems.BackgroundColor3 = window.theme.outlinecolor2
    dropdown.BlackOutlineItems.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-1, -1)
    dropdown.BlackOutlineItems.Visible = false
    updateevent.Event:Connect(function(theme)
        dropdown.BlackOutlineItems.BackgroundColor3 = theme.outlinecolor2
    end)

    dropdown.IgnoreBackButtons = Instance.new("TextButton", dropdown.Main)
    dropdown.IgnoreBackButtons.BackgroundTransparency = 1
    dropdown.IgnoreBackButtons.BorderSizePixel = 0
    dropdown.IgnoreBackButtons.Position = UDim2.fromOffset(0, dropdown.Main.Size.Y.Offset + 8)
    dropdown.IgnoreBackButtons.Size = UDim2.new(0, 0, 0, 0)
    dropdown.IgnoreBackButtons.ZIndex = 7
    dropdown.IgnoreBackButtons.Text = ""
    dropdown.IgnoreBackButtons.Visible = false
    dropdown.IgnoreBackButtons.AutoButtonColor = false

    if dropdown.flag and dropdown.flag ~= "" then
        library.flags[dropdown.flag] = dropdown.multichoice and {dropdown.default or dropdown.defaultitems[1] or ""} or (dropdown.default or dropdown.defaultitems[1] or "")
    end

    function dropdown:isSelected(item)
        for i, v in (dropdown.values) do
            if v == item then
                return true
            end
        end

        return false
    end

    function dropdown:GetOptions()
        return dropdown.values
    end

    function dropdown:updateText(text)
        if #text >= 27 then
            text = text:sub(1, 25) .. ".."
        end
        dropdown.SelectedLabel.Text = text
    end

    dropdown.Changed = Instance.new("BindableEvent")
    function dropdown:Set(value)
        if type(value) == "table" then
            dropdown.values = value
            dropdown:updateText(table.concat(value, ", "))
            pcall(dropdown.callback, value)
        else
            dropdown:updateText(value)
            dropdown.values = {value}
            pcall(dropdown.callback, value)
        end

        dropdown.Changed:Fire(value)
        if dropdown.flag and dropdown.flag ~= "" then
            library.flags[dropdown.flag] = dropdown.multichoice and dropdown.values or dropdown.values[1]
        end
    end

    function dropdown:Get()
        return dropdown.multichoice and dropdown.values or dropdown.values[1]
    end
end



function sector:AddDropdown(options)
    local dropdown = {}
    dropdown.items = {}
    dropdown.defaultitems = options.defaultitems or {}
    dropdown.default = options.default or nil
    dropdown.multichoice = options.multichoice or false
    dropdown.values = options.values or {}

    -- Dropdown UI components setup
    dropdown.Main = Instance.new("Frame", sector.Items)
    dropdown.Main.Size = UDim2.fromOffset(200, 40) -- Exemplo de tamanho
    dropdown.Main.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

    dropdown.Nav = Instance.new("TextButton", dropdown.Main)
    dropdown.Nav.Text = "▼"
    dropdown.Nav.Size = UDim2.fromOffset(20, 20)
    dropdown.Nav.Position = UDim2.fromOffset(dropdown.Main.Size.X.Offset - 20, 10)
    
    dropdown.ItemsFrame = Instance.new("Frame", dropdown.Main)
    dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, 0)
    dropdown.ItemsFrame.Position = UDim2.fromOffset(0, 40)
    dropdown.ItemsFrame.BackgroundTransparency = 1

    dropdown.OutlineItems = Instance.new("Frame", dropdown.ItemsFrame)
    dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
    dropdown.OutlineItems.BorderSizePixel = 0
    dropdown.OutlineItems.BackgroundColor3 = window.theme.outlinecolor2

    dropdown.BlackOutlineItems = Instance.new("Frame", dropdown.ItemsFrame)
    dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
    dropdown.BlackOutlineItems.BorderSizePixel = 0
    dropdown.BlackOutlineItems.BackgroundColor3 = Color3.fromRGB(30, 30, 30)

    dropdown.BlackOutline2Items = Instance.new("Frame", dropdown.ItemsFrame)
    dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
    dropdown.BlackOutline2Items.BorderSizePixel = 0
    dropdown.BlackOutline2Items.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

    -- Add item function
    function dropdown:Add(v)
        local Item = Instance.new("TextButton", dropdown.ItemsFrame)
        Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Item.TextColor3 = Color3.fromRGB(255, 255, 255)
        Item.BorderSizePixel = 0
        Item.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset - 4, 20)
        Item.Text = v
        Item.Name = v
        Item.AutoButtonColor = false
        Item.Font = window.theme.font
        Item.TextSize = 15
        Item.TextXAlignment = Enum.TextXAlignment.Left
        Item.TextStrokeTransparency = 1
        dropdown.ItemsFrame.CanvasSize = dropdown.ItemsFrame.CanvasSize + UDim2.fromOffset(0, Item.AbsoluteSize.Y)

        -- Add item behavior
        Item.MouseButton1Down:Connect(function()
            if dropdown.multichoice then
                if dropdown:isSelected(v) then
                    for i, v2 in ipairs(dropdown.values) do
                        if v2 == v then
                            table.remove(dropdown.values, i)
                        end
                    end
                    dropdown:Set(dropdown.values)
                else
                    table.insert(dropdown.values, v)
                    dropdown:Set(dropdown.values)
                end
            else
                dropdown.Nav.Rotation = 90
                dropdown.ItemsFrame.Visible = false
                dropdown.ItemsFrame.Active = false
                dropdown.OutlineItems.Visible = false
                dropdown.BlackOutlineItems.Visible = false
                dropdown.BlackOutline2Items.Visible = false
            end

            dropdown:Set(v)
        end)

        -- Update item UI when selected
        runservice.RenderStepped:Connect(function()
            if dropdown.multichoice and dropdown:isSelected(v) or dropdown.values[1] == v then
                Item.BackgroundColor3 = Color3.fromRGB(64, 64, 64)
                Item.TextColor3 = window.theme.accentcolor
                Item.Text = " " .. v
            else
                Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                Item.TextColor3 = Color3.fromRGB(255, 255, 255)
                Item.Text = v
            end
        end)

        -- Update dropdown size and canvas
        table.insert(dropdown.items, v)
        dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, math.clamp(#dropdown.items * Item.AbsoluteSize.Y, 20, 156) + 4)
        dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.ItemsFrame.AbsoluteSize.X, (#dropdown.items * Item.AbsoluteSize.Y) + 4)

        dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
        dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
        dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
    end

    -- Remove item function
    function dropdown:Remove(value)
        local item = dropdown.ItemsFrame:FindFirstChild(value)
        if item then
            for i, v in ipairs(dropdown.items) do
                if v == value then
                    table.remove(dropdown.items, i)
                end
            end

            dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, math.clamp(#dropdown.items * item.AbsoluteSize.Y, 20, 156) + 4)
            dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.ItemsFrame.AbsoluteSize.X, (#dropdown.items * item.AbsoluteSize.Y) + 4)

            dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
            dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
            dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)

            item:Remove()
        end
    end

    -- Initialize default items
    for _, v in ipairs(dropdown.defaultitems) do
        dropdown:Add(v)
    end

    -- Set default value if provided
    if dropdown.default then
        dropdown:Set(dropdown.default)
    end

    -- Handle dropdown open/close behavior
    local MouseButton1Down = function()
        if dropdown.Nav.Rotation == 90 then
            tweenservice:Create(dropdown.Nav, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {Rotation = - 90}):Play()
            dropdown.ItemsFrame.Visible = true
            dropdown.ItemsFrame.Active = true
            dropdown.IgnoreBackButtons.Visible = true
            dropdown.IgnoreBackButtons.Active = true
            dropdown.OutlineItems.Visible = true
            dropdown.BlackOutlineItems.Visible = true
            dropdown.BlackOutline2Items.Visible = true
        else
            tweenservice:Create(dropdown.Nav, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {Rotation = 90}):Play()
            dropdown.ItemsFrame.Visible = false
            dropdown.ItemsFrame.Active = false
            dropdown.IgnoreBackButtons.Visible = false
            dropdown.IgnoreBackButtons.Active = false
            dropdown.OutlineItems.Visible = false
            dropdown.BlackOutlineItems.Visible = false
            dropdown.BlackOutline2Items.Visible = false
        end
    end

    dropdown.Main.MouseButton1Down:Connect(MouseButton1Down)
    dropdown.Nav.MouseButton1Down:Connect(MouseButton1Down)

    dropdown.BlackOutline2.MouseEnter:Connect(function()
        dropdown.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
    end)

    dropdown.BlackOutline2.MouseLeave:Connect(function()
        dropdown.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
    end)

    sector:FixSize()
    table.insert(library.items, dropdown)

    return dropdown
end

function sector:AddSeperator(text)
    local seperator = {}
    seperator.text = text or ""

    seperator.main = Instance.new("Frame", sector.Items)
    seperator.main.Name = "Main"
    seperator.main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 10)
    seperator.main.BackgroundTransparency = 1

    seperator.line = Instance.new("Frame", seperator.main)
    seperator.line.Name = "Line"
    seperator.line.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 26, 1)
    seperator.line.Position = UDim2.fromOffset(7, 5)
    seperator.line.BackgroundColor3 = Color3.fromRGB(70, 70, 70)

    seperator.outline = Instance.new("Frame", seperator.line)
    seperator.outline.Name = "Outline"
    seperator.outline.Size = seperator.line.Size - UDim2.fromOffset(-2, -2)
    seperator.outline.Position = UDim2.fromOffset(-1, -1)
    seperator.outline.BackgroundColor3 = window.theme.outlinecolor2

    seperator.label = Instance.new("TextLabel", seperator.main)
    seperator.label.Name = "Label"
    seperator.label.Size = seperator.main.Size
    seperator.label.Text = seperator.text
    seperator.label.BackgroundTransparency = 1
    seperator.label.TextColor3 = Color3.fromRGB(255, 255, 255)
    seperator.label.TextSize = window.theme.fontsize
    seperator.label.TextStrokeTransparency = 1
    seperator.label.TextXAlignment = Enum.TextXAlignment.Center

    sector:FixSize()

    return seperator
end


-- Conversão de funções de criação de sistemas de configuração e watermark
local function CreateConfigSystem(name, side)
    local configsystem = {}

    configsystem.configFolder = window.name .. "/" .. game.PlaceId
    if (not isfolder(configsystem.configFolder)) then
        makefolder(configsystem.configFolder)
    end

    configsystem.sector = tab:CreateSector(name or "Config System", side or "left")

    local configname = configsystem.sector:AddTextbox("Config Name", "", configname, function() end, "")
    local default = (listfiles(configsystem.configFolder)[1] or ""):gsub(configsystem.configFolder .. "\\", ""):gsub(".txt", "")
    local config = configsystem.sector:AddDropdown("Configs", {}, default, false, function() end, "")
    for i, v in listfiles(configsystem.configFolder) do
        if v:find(".txt") then
            config:Add(v:gsub(configsystem.configFolder .. "\\", ""):gsub(".txt", ""))
        end
    end

    configsystem.Create = configsystem.sector:AddButton("Create", function()
        for i, v in listfiles(configsystem.configFolder) do
            config:Remove(v:gsub(configsystem.configFolder .. "\\", ""):gsub(".txt", ""))
        end

        if configname:Get() and configname:Get() ~= "" then
            local config2 = {}

            for i, v in library.flags do
                if (v and v ~= "") then
                    if (typeof(v) == "Color3") then
                        config2[i] = {v.R, v.G, v.B}
                    elseif (v:find("Enum.KeyCode")) then
                        config2[i] = v.Name
                    elseif (typeof(v) == "table") then
                        config2[i] = {v}
                    else
                        config2[i] = v
                    end
                end
            end

            writefile(configsystem.configFolder .. "/" .. configname:Get() .. ".txt", httpservice:JSONEncode(config2))

            for i, v in listfiles(configsystem.configFolder) do
                if v:find(".txt") then
                    config:Add(v:gsub(configsystem.configFolder .. "\\", ""):gsub(".txt", ""))
                end
            end
        end
    end)

    configsystem.Save = configsystem.sector:AddButton("Save", function()
        local config = {}
        if config:Get() and config:Get() ~= "" then
            for i, v in library.flags do
                if (v ~= nil and v ~= "") then
                    if (typeof(v) == "Color3") then
                        config[i] = {v.R, v.G, v.B}
                    elseif (v:find("Enum.KeyCode")) then
                        config[i] = "Enum.KeyCode." .. v.Name
                    elseif (typeof(v) == "table") then
                        config[i] = {v}
                    else
                        config[i] = v
                    end
                end
            end

            writefile(configsystem.configFolder .. "/" .. config:Get() .. ".txt", httpservice:JSONEncode(config))
        end
    end)

    configsystem.Load = configsystem.sector:AddButton("Load", function()
        local success = pcall(readfile, configsystem.configFolder .. "/" .. config:Get() .. ".txt")
        if (success) then
            pcall(function()
                local readconfig = httpservice:JSONDecode(readfile(configsystem.configFolder .. "/" .. config:Get() .. ".txt"))
                local newconfig = {}

                for i, v in readconfig do
                    if (typeof(v) == "table") then
                        if (typeof(v[1]) == "number") then
                            newconfig[i] = Color3.new(v[1], v[2], v[3])
                        elseif (typeof(v[1]) == "table") then
                            newconfig[i] = v[1]
                        end
                    elseif (v:find("Enum.KeyCode.")) then
                        newconfig[i] = Enum.KeyCode[v:gsub("Enum.KeyCode.", "")]
                    else
                        newconfig[i] = v
                    end
                end

                library.flags = newconfig

                for i, v in library.flags do
                    for i2, v2 in library.items do
                        if (i ~= nil and i ~= "" and i ~= "Configs_Name" and i ~= "Configs" and v2.flag) then
                            if (v2.flag == i) then
                                pcall(function()
                                    v2:Set(v)
                                end)
                            end
                        end
                    end
                end
            end)
        end
    end)

    configsystem.Delete = configsystem.sector:AddButton("Delete", function()
        for i, v in listfiles(configsystem.configFolder) do
            config:Remove(v:gsub(configsystem.configFolder .. "\\", ""):gsub(".txt", ""))
        end

        if (not config:Get() or config:Get() == "") then return end
        if (not isfile(configsystem.configFolder .. "/" .. config:Get() .. ".txt")) then return end
        delfile(configsystem.configFolder .. "/" .. config:Get() .. ".txt")

        for i, v in listfiles(configsystem.configFolder) do
            if v:find(".txt") then
                config:Add(v:gsub(configsystem.configFolder .. "\\", ""):gsub(".txt", ""))
            end
        end
    end)

    return configsystem
end

-- Função para criação do watermark
local function CreateWatermark(name, position)
    local gamename = marketplaceservice:GetProductInfo(game.PlaceId).Name
    local watermark = {}
    watermark.Visible = true
    watermark.text = " " .. name:gsub("{game}", gamename):gsub("{fps}", "0 FPS") .. " "

    watermark.main = Instance.new("ScreenGui", gethui and gethui() or coregui)
    watermark.main.Name = "RobloxGui"

    watermark.mainbar = Instance.new("Frame", watermark.main)
    watermark.mainbar.Name = "Main"
    watermark.mainbar.BorderColor3 = Color3.fromRGB(80, 80, 80)
    watermark.mainbar.Visible = watermark.Visible
    watermark.mainbar.BorderSizePixel = 0
    watermark.mainbar.ZIndex = 5
    watermark.mainbar.Position = UDim2.new(0, position and position.X or 10, 0, position and position.Y or 10)
    watermark.mainbar.Size = UDim2.new(0, 0, 0, 25)

    watermark.Gradient = Instance.new("UIGradient", watermark.mainbar)
    watermark.Gradient.Rotation = 90
    watermark.Gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)), ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 10))})

    watermark.Outline = Instance.new("Frame", watermark.mainbar)
    watermark.Outline.Name = "outline"
    watermark.Outline.ZIndex = 4
    watermark.Outline.BorderSizePixel = 0
    watermark.Outline.Visible = watermark.Visible
    watermark.Outline.BackgroundColor3 = library.theme.outlinecolor
    watermark.Outline.Position = UDim2.fromOffset(- 1, - 1)

    watermark.BlackOutline = Instance.new("Frame", watermark.mainbar)
    watermark.BlackOutline.Name = "blackline"
    watermark.BlackOutline.ZIndex = 3
    watermark.BlackOutline.BorderSizePixel = 0
    watermark.BlackOutline.BackgroundColor3 = library.theme.outlinecolor2
    watermark.BlackOutline.Visible = watermark.Visible
    watermark.BlackOutline.Position = UDim2.fromOffset(- 2, - 2)

    watermark.label = Instance.new("TextLabel", watermark.mainbar)
    watermark.label.Name = "FPSLabel"
    watermark.label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    watermark.label.BackgroundTransparency = 10
    watermark.label.Position = UDim2.new(0, 0, 0, 0)
    watermark.label.Size = UDim2.new(0, 238, 0, 25)
    watermark.label.Font = library.theme.font
    watermark.label.ZIndex = 6
    watermark.label.Visible = watermark.Visible
    watermark.label.Text = watermark.text
    watermark.label.TextColor3 = Color3.fromRGB(255, 255, 255)
    watermark.label.TextSize = 15
    watermark.label.TextStrokeTransparency = 0
    watermark.label.TextXAlignment = Enum.TextXAlignment.Left
    watermark.Size = UDim2.new(0, watermark.label.TextBounds.X + 10, 0, 25)
    watermark.Outline.Size = watermark.mainbar.Size + UDim2.fromOffset(2, 2)
    watermark.BlackOutline.Size = watermark.mainbar.Size + UDim2.fromOffset(4, 4)

    return watermark
end

return library
